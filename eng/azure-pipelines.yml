trigger:
  batch: true
  branches:
    include:
    - dotnet/main
    - dotnet/release/*

pr: none

variables:
- template: /eng/common-variables.yml@self
- template: /eng/common/templates-official/variables/pool-providers.yml@self

resources:
  repositories:
  - repository: 1ESPipelineTemplates
    type: git
    name: 1ESPipelineTemplates/1ESPipelineTemplates
    ref: refs/tags/release

parameters:
- name: linuxBuilds
  type: object
  default:
  - arch: x64
    assetManifestOS: linux
    imagename: linux_x64
    rootfsHost: /crossrootfs/x64
    rootfsTarget: /crossrootfs/x64
  - arch: arm64
    assetManifestOS: linux
    imagename: linux_arm64
    rootfsHost: /crossrootfs/x64
    rootfsTarget: /crossrootfs/arm64
  - arch: x64
    assetManifestOS: linux-musl
    imagename: linux_musl_x64
    rootfsHost: /crossrootfs/x64
    rootfsTarget: /crossrootfs/x64-alpine
  - arch: arm64
    assetManifestOS: linux-musl
    imagename: linux_musl_arm64
    rootfsHost: /crossrootfs/x64
    rootfsTarget: /crossrootfs/arm64-alpine
- name: macBuilds
  type: object
  default:
  - arch: x64
  - arch: arm64
- name: windowsBuilds
  type: object
  default:
  - arch: x64
  - arch: arm64

extends:
  template: v1/1ES.Official.PipelineTemplate.yml@1ESPipelineTemplates
  parameters:
    sdl:
      tsa:
        enabled: true
      policheck:
        enabled: true
        exclusionsFile: $(Build.SourcesDirectory)\.config\PoliCheckExclusions.xml
      eslint:
        enableExclusions: true
        exclusionPatterns: |
          **/deps/**
          **/test/**
      credscan:
        suppressionsFile: $(Build.SourcesDirectory)/.config/CredScanSuppressions.json
      binskim:
        enabled: true
        scanOutputDirectoryOnly: true
      sourceAnalysisPool:
        name: $(DncEngInternalBuildPool)
        image: 1es-windows-2022
        os: windows
    containers:
      linux_x64:
        image: mcr.microsoft.com/dotnet-buildtools/prereqs:cbl-mariner-2.0-cross-amd64
      linux_arm64:
        image: mcr.microsoft.com/dotnet-buildtools/prereqs:cbl-mariner-2.0-cross-biarch-amd64-arm64
      linux_musl_x64:
        image: mcr.microsoft.com/dotnet-buildtools/prereqs:cbl-mariner-2.0-cross-biarch-amd64-amd64-alpine
      linux_musl_arm64:
        image: mcr.microsoft.com/dotnet-buildtools/prereqs:cbl-mariner-2.0-cross-biarch-amd64-arm64-alpine
    stages:
    - stage: build
      displayName: Build
      jobs:
      - template: /eng/common/templates-official/jobs/jobs.yml@self
        parameters:
          enablePublishBuildArtifacts: true
          enablePublishBuildAssets: true
          enablePublishUsingPipelines: true
          jobs:

          ############ LINUX BUILD ############
          - ${{ each buildjob in parameters.linuxBuilds }}:
            - job: Build_${{ replace(buildjob.assetManifestOS, '-', '_') }}_${{ buildjob.arch }}
              displayName: ${{ buildjob.assetManifestOS }} ${{ buildjob.arch }}
              timeoutInMinutes: 600
              pool:
                name: $(DncEngInternalBuildPool)
                image: 1es-ubuntu-2204
                os: linux
              container: ${{ buildjob.imagename }}
              steps:
              - script: |
                  git clean -ffdx
                  git reset --hard HEAD
                displayName: 'Clean up working directory'

              - bash: |
                  ./build.sh --ci --restore --build --pack --arch ${{ buildjob.arch }} --configuration $(_BuildConfig) $(_InternalBuildArgs) /p:ClangBinDir=/usr/local/bin/  /p:RestoreUsingNuGetTargets=false /p:OutputRid=${{ buildjob.assetManifestOS }}-${{ buildjob.arch }}
                displayName: 'Build and package'
                env:
                  ROOTFS_DIR_HOST: ${{ buildjob.rootfsHost }}
                  ROOTFS_DIR_TARGET: ${{ buildjob.rootfsTarget }}

              - bash: ./eng/common/build.sh --ci --restore --publish --configuration $(_BuildConfig) $(_InternalBuildArgs) /p:AssetManifestOS=${{ buildjob.assetManifestOS }} /p:PlatformName=${{ buildjob.arch }} --projects $(Build.SourcesDirectory)/node.proj
                displayName: Publish packages
                condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

          ############ MACOS BUILD ############
          - ${{ each buildjob in parameters.macBuilds }}:
            - job: Build_macOS_${{ buildjob.arch }}
              displayName: macOS ${{ buildjob.arch }}
              timeoutInMinutes: 600
              pool:
                name: Azure Pipelines
                image: macOS-13
                os: macOS
              steps:
              - script: |
                  git clean -ffdx
                  git reset --hard HEAD
                displayName: 'Clean up working directory'

              - bash: |
                  ./build.sh --ci --restore --build --pack --arch ${{ buildjob.arch }} --configuration $(_BuildConfig) $(_InternalBuildArgs) /p:RestoreUsingNuGetTargets=false
                displayName: 'Build and package'

              - bash: ./eng/common/build.sh --ci --restore --publish --configuration $(_BuildConfig) $(_InternalBuildArgs) /p:AssetManifestOS=osx /p:PlatformName=${{ buildjob.arch }} --projects $(Build.SourcesDirectory)/node.proj
                displayName: Publish packages
                condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

          ############ WINDOWS BUILD ############
          - ${{ each buildjob in parameters.windowsBuilds }}:
            - job: Build_Windows_${{ buildjob.arch }}
              displayName: Windows ${{ buildjob.arch }}
              timeoutInMinutes: 600
              pool:
                name: $(DncEngInternalBuildPool)
                image: windows.vs2022.amd64
                os: windows
              steps:
              - script: |
                  git clean -ffdx
                  git reset --hard HEAD
                displayName: 'Clean up working directory'

              # nodejs configure needs python 3.11
              - task: UsePythonVersion@0
                inputs:
                  versionSpec: '3.11'
                  addToPath: true

              - powershell: eng\build.ps1 -ci -restore -build -pack -arch ${{ buildjob.arch }} -configuration $(_BuildConfig) $(_InternalBuildArgs) /p:RestoreUsingNuGetTargets=false
                displayName: 'Build and package'

              - powershell: eng\common\build.ps1 -ci -restore -publish -configuration $(_BuildConfig) $(_InternalBuildArgs) /p:AssetManifestOS=win /p:PlatformName=${{ buildjob.arch }} -projects $(Build.SourcesDirectory)\node.proj
                displayName: Publish packages
                condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

    ############ POST BUILD ARCADE LOGIC ############
    - template: /eng/common/templates-official/post-build/post-build.yml@self
      parameters:
        enableSourceLinkValidation: false
        enableSigningValidation: false
        enableSymbolValidation: false
        enableNugetValidation: true
